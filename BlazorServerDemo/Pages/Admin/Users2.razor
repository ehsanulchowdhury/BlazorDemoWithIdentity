@page "/Users2"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@attribute [Authorize(Roles = "Admin")]

@inject UserManager<ApplicationUser> UserMgr
@inject AuthenticationStateProvider AuthState


<h3>Users</h3>

<p>List of users: <a href="UserAddEdit" class="btn alert-primary">Add User</a></p>

@if (FilteredUserList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var Tool = (new List<string>() { "Search" });

    <div class="form-check">
        <input class="form-check-input" type="checkbox" value="" id="chkActiveOnly" name="chkActiveOnly" @onchange="OnCheckChange">
        <label class="form-check-label" for="chkActiveOnly">
            Show active only
        </label>
        <input placeholder="Search" @bind="searchTerm" />
        <button class="btn btn-sm btn-primary" @onclick="@FilterUserList">Filter</button>
    </div>

    <SfGrid DataSource="@FilteredUserList" AllowPaging="true" AllowFiltering="true" AllowSorting="true" Toolbar="@(new string[] { "Add", "Edit", "Delete", "Cancel", "Update", "Search" })" >
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ApplicationUser"></GridEvents>
    <GridPageSettings PageSize="5"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(ApplicationUser.FirstName) HeaderText="First Name" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(ApplicationUser.LastName) HeaderText="Last Name" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(ApplicationUser.UserEntityType) HeaderText="Entity Type" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(ApplicationUser.IsActive) HeaderText="Is Active" AutoFit="true" DisplayAsCheckBox="true"></GridColumn>
            <GridColumn Field=@nameof(ApplicationUser.UserName) HeaderText="User Name" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(ApplicationUser.Email) HeaderText="Email" AutoFit="true"></GridColumn>
            <GridColumn Field=@nameof(ApplicationUser.EmailConfirmed) HeaderText="EC" AutoFit="true" DisplayAsCheckBox="true">
            </GridColumn>
            @*<GridColumn Field=@nameof(ApplicationUser.PhoneNumber) HeaderText="Phone Number"></GridColumn>*@
            @*<GridColumn Field=@nameof(ApplicationUser.PhoneNumberConfirmed) HeaderText="PN Confirmed"></GridColumn>*@
            <GridColumn HeaderText="Action">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions(){
                        IconCss = "e-icons e-edit", CssClass = "e-flat"})">
                    </GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions(){
                        IconCss = "e-icons e-delete", CssClass = "e-flat" })">
                    </GridCommandColumn>
                    <GridCommandColumn ButtonOption="@(new CommandButtonOptions(){
                        Content = "Role", CssClass = "e-flat" })">
                    </GridCommandColumn>
                    <GridCommandColumn ButtonOption="@(new CommandButtonOptions(){
                        Content = "Claims", CssClass = "e-flat" })">
                    </GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
    @*<table class="table">
        <thead>
        <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>User Name</th>
        <th>Entity Type</th>
        <th>Email</th>
        <th>Phone#</th>
        <th>Active</th>
        <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (ApplicationUser user in FilteredUserList)
        {
        <tr>
        <td>@user.FirstName</td>
        <td>@user.LastName</td>
        <td>@user.UserName</td>
        <td>@user.UserEntityType</td>
        <td>@user.Email</td>
        <td>@user.PhoneNumber</td>
        <td>@user.IsActive</td>
        <td>
        <a href="UserAddEdit/@user.Id" class="btn btn-sm btn-primary">Edit</a>
        <a href="" class="btn btn-sm btn-danger">Delete</a>
        <a href="UserRole/@user.Id" class="btn btn-sm btn-secondary">Role</a>
        <a href="UserClaim/@user.Id" class="btn btn-sm btn-secondary">Claims</a>
        </td>
        </tr>
        }
        </tbody>
        </table>*@
}

<style>
   .e-grid .e-gridheader .e-headercell{ 
        background-color:#494089;
        color:white;    
        font-size:x-large;
    } 
       .e-grid .e-gridheader .e-headercell .e-icon{ 
        color:white;    
    } 
</style>

@code {

    private List<ApplicationUser> AllUserList = new List<ApplicationUser>();
    private List<ApplicationUser> FilteredUserList = new List<ApplicationUser>();
    public bool showActive = false;
    public string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        AllUserList = await UserMgr.Users.ToListAsync();
        FilteredUserList = AllUserList.ToList();

        var x = UserMgr.GetUsersInRoleAsync("Admin");
        //var authState = await authenticationStateTask;
        //var user = authState.User;
        //var r = UserMgr.IsInRoleAsync()
        var auth = await AuthState.GetAuthenticationStateAsync();
        var z = auth.User.Identity.Name;

    }

    public void ToolbarClickHandler(ClickEventArgs args)
    {
        if (args.Item.Text == "Add")
        {
            throw new ApplicationException("Add Clicked");
        }
        if (args.Item.Text == "Delete")
        {
            //perform your actions here
        }
    }

    private async Task OnCheckChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (args != null && args.Value != null)
            showActive = (bool)args.Value;
        else
            showActive = false;

        FilterUserList();
    }

    private void FilterUserList()
    {
        string term = string.IsNullOrWhiteSpace(searchTerm) ? "" : searchTerm.ToUpper();
        if (!string.IsNullOrWhiteSpace(term))
        {
            if (showActive)
                FilteredUserList = AllUserList.Where(u => (u.IsActive == true && (u.FirstName.ToUpper().Contains(term) || u.LastName.ToUpper().Contains(term)))).ToList();
            else
                FilteredUserList = AllUserList.Where(u => (u.FirstName.ToUpper().Contains(term) || u.LastName.ToUpper().Contains(term))).ToList();
        }
        else
        {
            if (showActive)
                FilteredUserList = AllUserList.Where(u => u.IsActive == true).ToList();
            else
                FilteredUserList = AllUserList.ToList();
        }

    }
}

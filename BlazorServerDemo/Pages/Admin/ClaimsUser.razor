@page "/UserClaim/{userId}"
@using SecureDemoClassLibrary.Helpers
@inject RoleManager<IdentityRole> _roleManager
@inject UserManager<ApplicationUser> _userManager

<h4>User : @user.FirstName @user.LastName </h4>

All Claims:
<br />
<div class="row">
    @foreach (var claim in allClaims)
    {
        <div class="col-md-4">
            <input class="form-check-input" type="checkbox" checked=@(CheckClaimAllowOrDeny(claim) ? "checked" : null) @onchange="eventArgs => { CheckboxClicked(claim, eventArgs.Value);}" />
            <label class="form-check-label">@claim</label>
        </div>
    }

    <div class="col-md-12">
        <button class="btn btn-outline-primary mt-4" @onclick="AssignClaimsToUserAsync">Add</button>
    </div>

    @if (userClaims != null)
    {
        <div class="col-md-6">
            <table class="table table-bordered mt-4">
                <thead>
                    <tr>
                        <th>Role Name</th>
                        <th>Allow / Deny</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var item in userClaims)
                    {
                        <tr>
                            <td>@item.Type</td>
                            <td>
                                @item.Value
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? UserId { get; set; }

    ApplicationUser? user;
    public List<string> allowClaims { get; set; } = new List<string>();
    private List<string>? allClaims;
    private List<string>? denyClaims;
    private IList<Claim>? userClaims;

    protected override async Task OnInitializedAsync()
    {
        user = await _userManager.FindByIdAsync(UserId);
        allClaims = Enum.GetNames(typeof(UserClaims)).ToList();
        userClaims = await _userManager.GetClaimsAsync(user);
    }

    private void CheckboxClicked(string CheckID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!allowClaims.Contains(CheckID))
            {
                allowClaims.Add(CheckID);
            }
        }
        else
        {
            if (allowClaims.Contains(CheckID))
            {
                allowClaims.Remove(CheckID);
            }
        }
    }

    private async Task AssignClaimsToUserAsync()
    {

        List<Claim> newClaims = new List<Claim>();
        foreach (var claimName in allowClaims)
            newClaims.Add(new Claim(claimName, "Allow"));

        foreach (var claimName in allClaims.Except(allowClaims).ToList())
            newClaims.Add(new Claim(claimName, "Deny"));


        var currentClaims = await _userManager.GetClaimsAsync(user); //Get all current claims

        foreach (var claim in currentClaims)
            await _userManager.RemoveClaimAsync(user, claim); //Remove all current claims

        foreach (var claim in newClaims)
            await _userManager.AddClaimAsync(user, claim); //Add new claims

        userClaims = await _userManager.GetClaimsAsync(user);
    }

    private bool CheckClaimAllowOrDeny(string claim)
    {
        foreach (Claim claimName in userClaims)
        {
            if (claimName.Type == claim && claimName.Value == "Allow")
                return true;
        }
        return false;
    }
}
@page "/UserAddEdit"
@page "/UserAddEdit/{id}"
@using System.Security.Policy
@using BlazorServerDemo.Areas.Identity.Pages.Account


@inject UserManager<ApplicationUser> _userManager
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager _navigation
@inject IEmailSender _emailSender
@inject NavigationManager MyNavigationManager

<h3>User Profile</h3>

<partial name="_StatusMessage" for="StatusMessage" />
<EditForm Model="@user" OnSubmit="@SaveUserProfile">
    <div class="row py-3">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="col-md-6">
            <div class="form-group">
                <label class="form-label">First Name</label>
                <input @bind-value="user.FirstName" class="form-control" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label class="form-label">User Entity</label>
                <input @bind-value="user.UserEntityType" class="form-control" />
            </div>
        </div>
        <div class="col-md-6 mt-3">
            <div class="form-group">
                <label class="form-label">Last Name</label>
                <input @bind-value="user.LastName" class="form-control" />
            </div>
        </div>
        <div class="col-md-6 mt-3">
            <div class="form-group">
                <label class="form-label">Phone No</label>
                <input @bind-value="user.PhoneNumber" class="form-control" />
            </div>
        </div>
        <div class="col-md-6 mt-3">
            <div class="form-group">
                <label class="form-label">User Name</label>
                <input @bind-value="user.UserName" class="form-control" />
            </div>
        </div>
        <div class="col-md-6 mt-3">
            <div class="form-group">
                <label class="form-label">Password</label>
                <input type="password" @bind-value="Password" class="form-control" />
            </div>
        </div>
        <div class="col-md-6 mt-3">
            <div class="form-group">
                <label class="form-label">E-mail</label>
                <input @bind-value="user.Email" class="form-control" />
            </div>
        </div>
        <div class="col-md-6 mt-3">
            <div class="form-group">
                <label class="form-label">Confirm Password</label>
                <input type="password" @bind-value="ConfirmPassword" class="form-control" />
            </div>
        </div>

        <div class="col-md-4 mt-3">
            <input class="form-check-input" type="checkbox" @bind="user.IsActive" />
            <label class="form-check-label">Is Active</label>
        </div>
        <div class="col-md-4 mt-3">
            <input class="form-check-input" type="checkbox" @bind="user.EmailConfirmed" disabled />
            <label class="form-check-label">Email Confirmed</label>
        </div>
        <div class="col-md-4 mt-3">
            <input class="form-check-input" type="checkbox" @bind="user.PhoneNumberConfirmed" disabled />
            <label class="form-check-label">Phone Number Confirmed</label>
        </div>

        <div class="col-md-4">
            <div>
                <button class="btn btn-primary mt-3">Save</button>
            </div>
        </div>
    </div>
</EditForm>


@code {

    [Parameter]
    public string? Id { get; set; }

    private bool IsNewAccountCreation = false;
    private ApplicationUser user;
    private string Password;
    private string ConfirmPassword;


    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Id))
        {
            IsNewAccountCreation = true;
            user = new();
        }
        else
        {
            IsNewAccountCreation = false;
            user = await _userManager.FindByIdAsync(Id);
            if (user == null)
                throw new ApplicationException("User Not Found");
        }
    }

    private async Task SaveUserProfile()
    {
        string returnUrl = _navigation.BaseUri;
        IdentityResult result;
        if (IsNewAccountCreation)
        {
            result = await _userManager.CreateAsync(user, Password);
        }
        else
        {
            result = await _userManager.UpdateAsync(user);
        }

        if (result.Succeeded)
            if (true)
            {
                try
                {
                    var userId = await _userManager.GetUserIdAsync(user);
                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                    //var callbackUrl = Url.Page(
                    //    "/Account/ConfirmEmail",
                    //    pageHandler: null,
                    //    values: new { area = "Identity", userId = userId, code = code, returnUrl = returnUrl },
                    //    protocol: _httpContextAccessor.HttpContext.Request.Scheme);

                    var callbackUrl = returnUrl + "Identity/Account/ConfirmEmail?userId=" + userId + "&code=" + code + "&returnUrl=%2F";

                    await _emailSender.SendEmailAsync(user.Email, "Confirm your email",
                    $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                    if (_userManager.Options.SignIn.RequireConfirmedAccount)
                    {
                        _navigation.NavigateTo("RegisterConfirmation?email=" + user.Email + "&returnUrl=" + returnUrl);
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }


                //else
                //{
                //    await _signInManager.SignInAsync(user, isPersistent: false);
                //    return LocalRedirect(returnUrl);
                //}
            }
        foreach (var error in result.Errors)
        {
            //ModelState.AddModelError(string.Empty, error.Description);
        }

        _navigation.NavigateTo("Users");
        //Identity / Account / RegisterConfirmation ? email = iqbal.hossain9@gmail.com & returnUrl =% 2F
    }

}

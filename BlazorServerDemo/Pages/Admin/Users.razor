@page "/Users"
@*@attribute [Authorize(Roles = "")]*@

@inject UserManager<ApplicationUser> UserMgr


<h3>Users</h3>

<p>List of users: <a href="UserAddEdit" class="btn alert-primary">Add User</a></p>

@if (FilteredUserList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-check">
        <input class="form-check-input" type="checkbox" value="" id="chkActiveOnly" name="chkActiveOnly" @onchange="OnCheckChange">
        <label class="form-check-label" for="chkActiveOnly">
            Show active only
        </label>
        <input placeholder="Search" @bind="searchTerm"/>
        <button class="btn btn-sm btn-primary" @onclick="@FilterUserList">Filter</button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>User Name</th>
                <th>Entity Type</th>
                <th>Email</th>
                <th>Phone#</th>
                <th>Active</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (ApplicationUser user in FilteredUserList)
            {
                <tr>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.UserName</td>
                    <td>@user.UserEntityType</td>
                    <td>@user.Email</td>
                    <td>@user.PhoneNumber</td>
                    <td>@user.IsActive</td>
                    <td>
                        <a href="UserAddEdit/@user.Id">Edit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<ApplicationUser> AllUserList = new List<ApplicationUser>();
    private List<ApplicationUser> FilteredUserList = new List<ApplicationUser>();
    public bool showActive = false;
    public string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        AllUserList = await UserMgr.Users.ToListAsync();
        FilteredUserList = AllUserList.ToList();
    }

    private async Task OnCheckChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (args != null && args.Value != null)
            showActive = (bool)args.Value;
        else
            showActive = false;

        FilterUserList();
    }

    private void FilterUserList()
    {
        string term = string.IsNullOrWhiteSpace(searchTerm) ? "" : searchTerm.ToUpper();
        if (!string.IsNullOrWhiteSpace(term))
        {
            if (showActive)
                FilteredUserList = AllUserList.Where(u => (u.IsActive == true && (u.FirstName.ToUpper().Contains(term) || u.LastName.ToUpper().Contains(term)))).ToList();
            else
                FilteredUserList = AllUserList.Where(u => (u.FirstName.ToUpper().Contains(term) || u.LastName.ToUpper().Contains(term))).ToList();
        }
        else
        {
            if (showActive)
                FilteredUserList = AllUserList.Where(u => u.IsActive == true).ToList();
            else
                FilteredUserList = AllUserList.ToList();
        }

    }
}
